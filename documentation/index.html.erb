<%
  require 'uv'
  require 'json'
  @counter = 0
  def code_for(file, executable=false, show_load=true)
    @counter += 1
    return '' unless File.exists?("documentation/js/#{file}.js")
    cs = File.read("documentation/coffee/#{file}.coffee")
    js = File.read("documentation/js/#{file}.js")
    js = js.sub(/^\/\/ generated.*?\n/i, '')
    cshtml = Uv.parse(cs, 'xhtml', 'source.coffee', false, 'idle', false)
    jshtml = Uv.parse(js, 'xhtml', 'source.js', false, 'idle', false)
    append = executable  == true ? '' : "alert(#{executable});"
    if executable and executable != true
      cs.sub!(/(\S)\s*\Z/m, "\\1\n\nalert #{executable}")
    end
    run    = executable  == true ? 'executar' : "executar: #{executable}"
    name   = "example#{@counter}"
    script = "<script>window.#{name} = #{cs.to_json}</script>"
    import = show_load ? "<div class='minibutton load' onclick='javascript: loadConsole(#{name});'>carregar</div>" : ''
    button = executable ? "<div class='minibutton ok' onclick='javascript: #{js};#{append}'>#{run}</div>" : ''
    "<div class='code'>#{cshtml}#{jshtml}#{script}#{import}#{button}<br class='clear' /></div>"
  end
%>


<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <title>CoffeeScript</title>
  <link rel="canonical" href="http://coffeescript.com.br" />
  <link rel="stylesheet" type="text/css" href="documentation/css/docs.css" />
  <link rel="stylesheet" type="text/css" href="documentation/css/idle.css" />
  <link rel="shortcut icon" href="documentation/images/favicon.ico" />
</head>
<body>

  <div id="fadeout"></div>

  <div id="flybar">
    <a id="logo" href="#top"> </a>
    <div class="navigation toc">
      <div class="button">
        Índice Analítico
      </div>
      <div class="contents menu">
        <a href="#overview">Visão Geral</a>
        <a href="#installation">Instalação</a>
        <a href="#usage">Uso</a>
        <a href="#language">Referência da Linguagem</a>
        <a href="#literals">Literais: Funções, Objetos e Arrays</a>
        <a href="#lexical_scope">Escopo Léxico e Segurança de Variável</a>
        <a href="#conditionals">If, Else, Unless, e Atribuição Condicional</a>
        <a href="#splats">Splats...</a>
        <a href="#loops">Laços e Compreensões de Listas</a>
        <a href="#slices">Fatiamento e Substituição de Arrays</a>
        <a href="#expressions">Tudo é uma Expressão</a>
        <a href="#operators">Operadores e Aliases</a>
        <a href="#classes">Classes, Herança, e Superclasses</a>
        <a href="#destructuring">Múltiplas Atribuições</a>
        <a href="#fat_arrow">Ligando Funções</a>
        <a href="#embedded">JavaScript Incorporado</a>
        <a href="#switch">Switch e Try/Catch</a>
        <a href="#comparisons">Multi Comparações</a>
        <a href="#strings">Interpolação, Blocos de Strings, e Blocos de Comentários</a>
        <a href="#regexes">Blocos de Expressões Regulares</a>
        <a href="#cake">Cake, e Cakefiles</a>
        <a href="#scripts">Tags de Script "text/coffeescript"</a>
        <a href="#resources">Livros, Screencasts, Exemplos e Fontes</a>
        <a href="#changelog">Log de Mudanças</a>
      </div>
    </div>
    <div class="navigation try">
      <div class="button">
        Experimente CoffeeScript
        <div class="repl_bridge"></div>
      </div>
      <div class="contents repl_wrapper">
        <div class="code">
          <div class="screenshadow tl"></div>
          <div class="screenshadow tr"></div>
          <div class="screenshadow bl"></div>
          <div class="screenshadow br"></div>
          <div id="repl_source_wrap">
            <textarea id="repl_source" rows="100" spellcheck="false">alert "Olá CoffeeScript!"</textarea>
          </div>
          <div id="repl_results_wrap"><pre id="repl_results"></pre></div>
          <div class="minibutton dark run" title="Ctrl-Enter">Executar</div>
          <a class="minibutton permalink" id="repl_permalink">Link</a>
          <br class="clear" />
        </div>
      </div>
    </div>
    <div class="navigation annotated">
      <div class="button">
        Código Comentado
      </div>
      <div class="contents menu">
        <a href="documentation/docs/grammar.html">Regras Gramaticais &mdash; src/grammar</a>
        <a href="documentation/docs/lexer.html">Tokens Léxicos &mdash; src/lexer</a>
        <a href="documentation/docs/rewriter.html">O Rewriter &mdash; src/rewriter</a>
        <a href="documentation/docs/nodes.html">A Árvore de Sintaxe &mdash; src/nodes</a>
        <a href="documentation/docs/scope.html">Escopo Léxico &mdash; src/scope</a>
        <a href="documentation/docs/helpers.html">Helpers &amp; Utility Functions &mdash; src/helpers</a>
        <a href="documentation/docs/coffee-script.html">O Módulo CoffeeScript &mdash; src/coffee-script</a>
        <a href="documentation/docs/cake.html">Cake &amp; Cakefiles &mdash; src/cake</a>
        <a href="documentation/docs/command.html">Utilitário de Linha de Comando "coffee" &mdash; src/command</a>
        <a href="documentation/docs/optparse.html">Parser de Opções &mdash; src/optparse</a>
        <a href="documentation/docs/repl.html">REPL Interativo &mdash; src/repl</a>
      </div>
    </div>
    <div id="error" style="display:none;"></div>
  </div>

  <div class="container">
    <span class="bookmark" id="top"></span>

    <p>
      <b>CoffeeScript é uma pequena linguagem que compila para JavaScript.</b>
      Por baixo de todas essas chaves e ponto-e-vírgulas inconvenientes, JavaScript sempre teve
      um lindo modelo de objeto em seu coração. CoffeeScript é uma tentativa de expor
      as partes boas de JavaScript de uma maneira simples.
    </p>

    <p>
      A regra de ouro do CoffeeScript é: "<i>É apenas JavaScript</i>". O código
      compila para um JS equivalente, e não há uma interpretação em tempo de execução (runtime).
      Você pode usar qualquer biblioteca JavaScript existente sem problemas de CoffeeScript (e vice-versa).
      A saída compilada é legível e bem impressa, passa pelo <a href="http://www.javascriptlint.com/">JavaScript Lint</a>
      sem advertências, funcionará em qualquer <em>runtime</em> JavaScript, e tende a
      executar tão ou mais rápido que o JavaScript equivalente escrito a mão.
    </p>

    <p>
      <b>Versão Mais Recente:</b>
      <a href="http://github.com/jashkenas/coffee-script/tarball/1.3.3">1.3.3</a>
    </p>

    <h2>
      <span id="overview" class="bookmark"></span>
      Visão Geral
    </h2>

    <p><i>CoffeeScript à esquerda, saída compilada de JavaScript à direita.</i></p>

    <%= code_for('overview', 'cubes', false) %>

    <h2>
      <span id="installation" class="bookmark"></span>
      Instalação
    </h2>

    <p>
      O próprio compilador CoffeeScript é
      <a href="documentation/docs/grammar.html">escrito em CoffeeScript</a>,
      usando o <a href="http://jison.org">gerador analítico Jison</a>. A
      versão de linha de comando de <tt>coffee</tt> está disponível como um
      utilitário <a href="http://nodejs.org/">Node.js</a>. O
      <a href="extras/coffee-script.js">núcleo de compilador</a> entretanto, não
      depende do Node, e pode ser executado em qualquer ambiente JavaScript, ou no
      navegador (veja "Experimente CoffeeScript", acima).
    </p>

    <p>
      Para instalar, primeiramente tenha certeza de que você tenha uma cópia da última
      versão estável do <a href="http://nodejs.org/">Node.js</a>, e do <a href="http://npmjs.org">npm</a>
      (o Gerenciador de Pacotes do Node – <em>Node Package Manager</em>). Você então
      poderá instalar o CoffeeScript com o npm:
    </p>

    <pre>
npm install -g coffee-script</pre>

    <p>
      (Deixe de fora o <tt>-g</tt> se você não quiser instalar globalmente.)
    </p>

    <p>
      Se você preferir instalar a versão mais recente do CoffeeScript, você pode clonar o
      <a href="http://github.com/jashkenas/coffee-script">repositório do código fonte</a>
      do CoffeeScript no GitHub, ou fazer o download do
      <a href="http://github.com/jashkenas/coffee-script/tarball/master">código fonte</a> diretamente.
      Para instalar o compilador CoffeeScript para todo o sistema
      em <tt>/usr/local</tt>, abra o diretório e execute:
    </p>

  <pre>
sudo bin/cake install</pre>

    <h2>
      <span id="usage" class="bookmark"></span>
      Uso
    </h2>

    <p>
      Depois de instalado, você deverá ter acesso ao comando <tt>coffee</tt>,
      que pode executar scripts, compilar arquivos <tt>.coffee</tt> para <tt>.js</tt>,
      e fornecer um REPL (Read-Eval-Print-Loop) interativo. O comando <tt>coffee</tt>
      aceita as seguintes opções:
    </p>

    <table>
      <tr>
        <td><code>-c, --compile</code></td>
        <td>
          Compila um script <tt>.coffee</tt> para um arquivo JavaScript <tt>.js</tt>
          com o mesmo nome.
        </td>
      </tr>
      <tr>
        <td width="25%"><code>-i, --interactive</code></td>
        <td>
          Inicia uma sessão interativa de CoffeeScript para execução de pequenos trechos.
          Idêntico ao chamar <tt>coffee</tt> sem argumentos.
        </td>
      </tr>
      <tr>
        <td><code>-o, --output [DIR]</code></td>
        <td>
          Escreve todos os aquivos JavaScript compilados no diretório especificado.
          Use em conjunto com <tt>--compile</tt> ou <tt>--watch</tt>.
        </td>
      </tr>
      <tr>
        <td><code>-j, --join [FILE]</code></td>
        <td>
          Antes de compilar, concatena todos os scrips juntos na mesma ordem em que
          forem passados, e os escreve no arquivo especificdo.
          Útil na construção de grandes projetos.
        </td>
      </tr>
      <tr>
        <td><code>-w, --watch</code></td>
        <td>
          Observa os arquivos por modificações, reexecutando o comando especificdo
          quando qualquer arquivo for atualizado.
        </td>
      </tr>
      <tr>
        <td><code>-p, --print</code></td>
        <td>
          Em vez de escrever o JavaScript como um arquivo, imprime
          diretamente na <b>saída padrão</b> (stdout).
        </td>
      </tr>
      <tr>
        <td><code>-l, --lint</code></td>
        <td>
          Se o comando <tt>jsl</tt>
          (<a href="http://www.javascriptlint.com/">JavaScript Lint</a>)
          está instalado, use-o para verificar a compilação de um
          arquivo CoffeeScript. (Conveniente em conjunto com <br /> <tt>--watch</tt>)
        </td>
      </tr>
      <tr>
        <td><code>-s, --stdio</code></td>
        <td>
          Passa o CoffeeScript para STDIN e recupera o JavaScript pela STDOUT.
          Bom para uso com processos escritos em outras linguagens. Por exemplo:<br />
          <tt>cat src/cake.coffee | coffee -sc</tt>
        </td>
      </tr>
      <tr>
        <td><code>-e, --eval</code></td>
        <td>
          Compila e imprime um pequeno fragmento de CoffeeScript diretamente da
          linha de comando. Por exemplo:<br /><tt>coffee -e "console.log num for num in [10..1]"</tt>
        </td>
      </tr>
      <tr>
        <td><code>-r, --require</code></td>
        <td>
          Carrega uma biblioteca antes de compilar ou executar seu script. Pode ser
          usado para ligar algo ao compilador (para adicionar notificações Growl, por exemplo).
        </td>
      </tr>
      <tr>
        <td><code>-b, --bare</code></td>
        <td>
          Compila o JavaScript sem a
          <a href="#lexical_scope">função de segurança de alto nível</a>.
        </td>
      </tr>
      <tr>
        <td><code>-t, --tokens</code></td>
        <td>
          Em vez de realizar a análise sintática (parse) do CoffeeScript, apenas
          realiza a analise léxica e imprime o fluxo de tokens:
          <tt>[IDENTIFIER square] [ASSIGN =] [PARAM_START (]</tt> ...
        </td>
      </tr>
      <tr>
        <td><code>-n, --nodes</code></td>
        <td>
          Em vez de compilar o CoffeeScript, apenas realiza as análises léxica e sintática,
          e imprime a árvore sintática:
<pre class="no_bar">
Expressions
  Assign
    Value "square"
    Code "x"
      Op *
        Value "x"
        Value "x"</pre>
        </td>
      </tr>
      <tr>
        <td><code>--nodejs</code></td>
        <td>
          O <tt>node</tt> executável tem algumas opções úteis que você pode especificar,
          como <tt>--debug</tt>, <tt>--debug-brk</tt> e <tt>--max-stack-size</tt>. Use esta
          <em>flag</em> para passar as opções diretamente ao Node.js.
        </td>
      </tr>
    </table>

    <p>
      <b>Exemplos:</b>
    </p>

    <ul>
      <li>
        Compila uma árvore de diretório de arquivos <tt>.coffee</tt> em <tt>src</tt> em
        uma árvore paralela dos arquivos <tt>.js</tt> em <tt>lib</tt>:<br />
        <tt>coffee --compile --output lib/ src/</tt>
      </li>
      <li>
        Observa um arquivo por alterações, e o recompila toda vez que o arquivo é salvo:<br />
        <tt>coffee --watch --compile experimental.coffee</tt>
      </li>
      <li>
        Concatena uma lista de arquivos em um único script:<br />
        <tt>coffee --join project.js --compile src/*.coffee</tt>
      </li>
      <li>
        Imprime o JS compilado de uma linha:<br />
        <tt>coffee -bpe "alert i for i in [0..10]"</tt>
      </li>
      <li>
        Tudo junto agora, observa e recompila um projeto inteiro enquanto você trabalha nele:<br />
        <tt>coffee -o lib/ -cw src/</tt>
      </li>
      <li>
        Inicial o CoffeeScript REPL (<tt>Ctrl-D</tt> para sair, <tt>Ctrl-V</tt> para multi-linha):<br />
        <tt>coffee</tt>
      </li>
    </ul>

    <h2>
      <span id="language" class="bookmark"></span>
      Referência da Linguagem
    </h2>

    <p>
      <i>
        Esta referência está estruturada de maneira que possa ser lida de cima para
        baixo, se desejar. Ao decorrer do documento, as seções usam idéias e sintaxes anteriormente
        introduzidas. É necessário ter familiaridade com JavaScript. Em todos os
        exemplos seguintes, o código CoffeeScript é fornecido ao lado esquerdo,
        e a compilação direta para JavaScript está ao lado direito.
      </i>
    </p>

    <p>
      <i>
        Muitos dos exemplos podem ser executados (os que fazem sentido), pressionando
        o botão <b>executar</b> à direita, e pode ser carregado no console "Experimente CoffeeScript"
        pressionando o botão <b>carregar</b> do lado esquerdo.
      </i>
    <p>
      Primeiramente, o básico: CoffeeScript usa espaços em branco para delimitar blocos de código.
      Você não precisa usar ponto-e-vígulas <tt>;</tt> ao témino de uma expressão,
      terminar a linha terá o mesmo resultado (embora ainda seja possível utilizar ponto-e-vígula
      para delimitar várias expressões em uma mesma linha).
      Em vez de usar chaves <tt>{ }</tt> para agrupar blocos de código em <a href="#literals">funções</a>,
      <a href="#conditionals"><em>if</em></a>,
      <a href="#switch"><em>switch</em></a>, e <a href="#try">try/catch</a>,
      use indentação.
    </p>

    <p>
      Você não precisa usar parênteses para invocar uma função se você estiver
      passando argumentos. A chamada agrupa implicitamente até o fim da linha ou da expressão de bloco.<br />
      <tt>console.log sys.inspect object</tt> &rarr; <tt>console.log(sys.inspect(object));</tt>
    </p>

    <p>
      <span id="literals" class="bookmark"></span>
      <b class="header">Funções</b>
      Funções são definidas por uma lista de parâmetros opcionais entre parênteses,
      uma seta, e o corpo da função. A função vazia parece assim: <tt>-></tt>
    </p>
    <%= code_for('functions', 'cube(5)') %>
    <p>
      Funções também podem ter valores padrão para argumentos. Sobrescreva o valor
      padrão passando um argumento não nulo.
    </p>
    <%= code_for('default_args', 'fill("cup")') %>

    <p>
      <span id="objects_and_arrays" class="bookmark"></span>
      <b class="header">Objetos e Arrays</b>
      Os literias de CoffeeScript para objtos e <em>arrays</em> se parecem bastante
      com seus primos JavaScript. Quando cada propriedade é listada em sua própria
      linha, as vírgulas são opcionais. Objetos devem ser criados usando indentação
      em vez de chaves explícitas, similar ao <a href="http://yaml.org">YAML</a>.
    </p>
    <%= code_for('objects_and_arrays', 'song.join(" ... ")') %>
    <p>
      Em JavaScript, você não pode usar palavras reservadas, como <tt>class</tt>, como
      propriedades de um objeto, sem envolvê-las com áspas como <em>strings</em>.
      CoffeeScript reconhece palavras reservadas usadas como chave (key) em um objeto
      e coloca áspas nelas para você, então você não precisa se preocupar com isso
      (por exemplo, quando usando jQuery).
    </p>
    <%= code_for('objects_reserved') %>

    <p>
      <span id="lexical_scope" class="bookmark"></span>
      <b class="header">Escopo Léxico e Segurança de Variáveis</b>
      O compilador CoffeeScript tem o cuidado de se certificar que todas as suas
      variáveis estão propriamente declaradas dentro de um escopo léxico &mdash;
      você mesmo nunca precisa escrever <tt>var</tt>.
    </p>
    <%= code_for('scope', 'inner') %>
    <p>
      Note como todas as declarações de variável foram colocadas no começo do
      escopo mais próximo, a primeira vez que elas aparecem.
      <b>outer</b> não está declarada dentro da função, porque ela já está no
      escopo; <b>inner</b> dentro da função, por outro lado, não deve ser capaz
      de mudar o valor da variável externa de mesmo nome, e portanto tem uma
      própria declaração.
    </p>
    <p>
      Este comportamento é efetivamente idêntico ao escopo de Ruby para variáveis
      locais. Pelo fato de você não ter acesso direto à palavra-chave <tt>var</tt>,
      é impossível esconder uma variável externa de propósito, você deve apenas
      se referir a ela. Então tenha cuidado com o reúso de um nome de variável
      externa acidentalmente, principalmente se você estiver escrevendo uma função
      profundamente aninhada.
    </p>
    <p>
      Embora suprimida nesta documentação para maior clareza, toda saída CoffeeScript é
      empacotada em uma função anônima: <tt>(function(){ ... })();</tt> Este
      empacotador seguro, combinado com a geração automática da palavra-chave
      <tt>var</tt>, faz com que seja extremamente difícil de poluir os espaços
      de nomes (namespace) globais por acidente.
    </p>
    <p>
      Se você quiser criar variáveis de nível superior para outros scripts usarem,
      anexe-as como propriedades em <b>window</b>, ou no objeto <b>exports</b> em
      CommonJS. O <b>operador existencial</b> (mostrado abaixo), fornece a você uma
      forma confiável de descobrir onde adicioná-las; se você quiser as duas coisas
      (CommonJS e o navegador): <tt>exports ? this</tt>
    </p>

    <p>
      <span id="conditionals" class="bookmark"></span>
      <b class="header">If, Else, Unless, e Atribuição Condicional</b>
      Declarações <b>If/else</b> podem ser escritas sem o uso de parênteses e chaves.
      Assim como funções e outras expressões de bloco, condicionais multi-linha são
      delimitados por indentação. Também existe uma forma pós-fixa, com o <tt>if</tt>
      ou <tt>unless</tt> ao final.
    </p>
    <p>
      CoffeeScript pode compilar declarações <b>if</b> para expressões JavaScript,
      usando o operador ternário quando possível, e blocos de chaves caso contrário.
      Não existe declaração ternária explícita em CoffeeScript &mdash; você simplesmente
      usa uma declaração <b>if</b> normal em uma mesma linha.
    </p>
    <%= code_for('conditionals') %>

    <p>
      <span id="splats" class="bookmark"></span>
      <b class="header">Splats...</b>
      O <b>objeto de argumentos</b> de JavaScript é uma maneira útil de trabalhar
      com funções que aceitam um número variado de argumentos. CoffeeScript fornece
      <em>splats</em> <tt>...</tt>, tanto para definições de função quanto para
      invocações, fazendo com que o número variável de argumentos seja um pouco
      mais saboroso.
    </p>
    <%= code_for('splats', true) %>

    <p>
      <span id="loops" class="bookmark"></span>
      <b class="header">Laços e Compreensões de Listas</b>
      A maioria dos laços (<em>loops</em>) que você escreverá em CoffeeScript serão
      <b>compreensões de listas</b> em <em>arrays</em>, objetos, e intervalos (<em>ranges</em>).
      Compreensões de listas substituem (e compilam para) laços <b>for</b>, com
      cláusulas <em>guard</em> opcionais e o valor atual do índice do <em>array</em>.
      Diferente de laços, as <b>compreensões</b> são expressões, e podem ser retornadas
      e atribuídas.
    </p>
    <%= code_for('array_comprehensions') %>
    <p>
      Compreensões devem ser capazes de lidar com a maioria dos casos onde você
      de outra maneira usaria um laço normal, <b>each</b>/<b>forEach</b>, <b>map</b>,
      ou <b>select</b>/<b>filter</b>, por exemplo:
      <tt>shortNames = (name for name in list when name.length &lt; 5)</tt><br />
      Se você sabe o começa e termina o laço, ou gostaria de percorrer o laço
      com incrementos de tamanho fixo, você pode usar um intervalo (<em>range</em>)
      para especificar o começo e o fim das suas <b>compreensões</b>.
    </p>
    <%= code_for('range_comprehensions', 'countdown') %>
    <p>
      Peceba que, pelo fato de estarmos atribuindo o valor das compreensões de lista
      a uma variável no exemplo acima, CoffeeScript coleta o resultado de cada
      iteração em um <em>array</em>. Às vezes funções terminam com laços que
      servem apenas para rodar no contexto da própria função. Tenha cuidado para
      não retornar acidentalmente os resultados da compreensão, nestes casos
      apenas adicione um valor de retorno significativo &mdash; como <tt>true</tt>
      &mdash; ou <tt>null</tt>, ao final da sua função.
    </p>
    <p>
      Para percorrer uma compreensão de intervalo em passos de tamanho fixo,
      use <tt>by</tt>, por exemplo:<br />
      <tt>pares = (x for x in [0..10] by 2)</tt>
    </p>
    <p>
      Compreensões também podem ser usadas para iterar sobre as chaves (<em>key</em>) e valores (<em>value</em>)
      em um objeto. Use <tt>of</tt> para sinalizar a compreensão sobre as propriedades
      de um objeto, em vez dos valores em um <em>array</em>.
    </p>
    <%= code_for('object_comprehensions', 'ages.join(", ")') %>
    <p>
      Se você desejasse iterar somente sobre as chaves (<em>keys</em>) que são
      definidas no próprio objeto, adicionando uma verificação <tt>hasOwnProperty</tt>
      para evitar propriedades que possam ter sido herdadas do protótipo, use<br />
      <tt>for own key, value of object</tt>
    </p>
    <p>
      O único laço de baixo nível que CoffeeScript fornece é o laço <b>while</b>. A
      principal diferença de JavaScript é que o laço <b>while</b> pode ser usado como
      uma expressão, retornando um <em>array</em> contendo o resultado de cada iteração
      atravéz do laço.
    </p>
    <%= code_for('while', 'lyrics.join("\n")') %>
    <p>
      Para legibilidade, a palavra-chave <b>until</b> é equivalente a <tt>while not</tt>,
      e a palavra-chave <b>loop</b> é equivalente a <tt>while true</tt>.
    </p>
    <p>
      Quando usando um laço JavaScript para gerar funções, é comum inserir um
      agrupamento (<em>wrapper</em>) a fim de garantir que as variáveis do laço estão
      corretamente fechadas, e todas as funções geradas não compartilhem apenas
      os valores finais. CoffeeScript fornece a palavra-chave <tt>do</tt>, que invoca
      imediatamente uma função passada com seus respectivos argumentos.
    </p>
    <%= code_for('do') %>
    <p>
      <span id="slices" class="bookmark"></span>
      <b class="header">Array Slicing and Splicing with Ranges</b>
      Ranges can also be used to extract slices of arrays.
      With two dots (<tt>3..6</tt>), the range is inclusive (<tt>3, 4, 5, 6</tt>);
      with three dots (<tt>3...6</tt>), the range excludes the end (<tt>3, 4, 5</tt>).
      Slices indices have useful defaults. An omitted first index defaults to
      zero and an omitted second index defaults to the size of the array.
    </p>
    <%= code_for('slices', 'middle') %>
    <p>
      The same syntax can be used with assignment to replace a segment of an array
      with new values, splicing it.
    </p>
    <%= code_for('splices', 'numbers') %>
    <p>
      Note that JavaScript strings are immutable, and can't be spliced.
    </p>
    <p>
      <span id="expressions" class="bookmark"></span>
      <b class="header">Everything is an Expression (at least, as much as possible)</b>
      You might have noticed how even though we don't add return statements
      to CoffeeScript functions, they nonetheless return their final value.
      The CoffeeScript compiler tries to make sure that all statements in the
      language can be used as expressions. Watch how the <tt>return</tt> gets
      pushed down into each possible branch of execution in the function
      below.
    </p>
    <%= code_for('expressions', 'eldest') %>
    <p>
      Even though functions will always return their final value, it's both possible
      and encouraged to return early from a function body writing out the explicit
      return (<tt>return value</tt>), when you know that you're done.
    </p>
    <p>
      Because variable declarations occur at the top of scope, assignment can
      be used within expressions, even for variables that haven't been seen before:
    </p>
    <%= code_for('expressions_assignment', 'six') %>
    <p>
      Things that would otherwise be statements in JavaScript, when used
      as part of an expression in CoffeeScript, are converted into expressions
      by wrapping them in a closure. This lets you do useful things, like assign
      the result of a comprehension to a variable:
    </p>
    <%= code_for('expressions_comprehension', 'globals') %>
    <p>
      As well as silly things, like passing a <b>try/catch</b> statement directly
      into a function call:
    </p>
    <%= code_for('expressions_try', true) %>
    <p>
      There are a handful of statements in JavaScript that can't be meaningfully
      converted into expressions, namely <tt>break</tt>, <tt>continue</tt>,
      and <tt>return</tt>. If you make use of them within a block of code,
      CoffeeScript won't try to perform the conversion.
    </p>

    <p>
      <span id="operators" class="bookmark"></span>
      <b class="header">Operators and Aliases</b>
      Because the <tt>==</tt> operator frequently causes undesirable coercion,
      is intransitive, and has a different meaning than in other languages,
      CoffeeScript compiles <tt>==</tt> into <tt>===</tt>, and <tt>!=</tt> into
      <tt>!==</tt>.
      In addition, <tt>is</tt> compiles into <tt>===</tt>,
      and <tt>isnt</tt> into <tt>!==</tt>.
    </p>
    <p>
      You can use <tt>not</tt> as an alias for <tt>!</tt>.
    </p>
    <p>
      For logic, <tt>and</tt> compiles to <tt>&amp;&amp;</tt>, and <tt>or</tt>
      into <tt>||</tt>.
    </p>
    <p>
      Instead of a newline or semicolon, <tt>then</tt> can be used to separate
      conditions from expressions, in <b>while</b>,
      <b>if</b>/<b>else</b>, and <b>switch</b>/<b>when</b> statements.
    </p>
    <p>
      As in <a href="http://yaml.org/">YAML</a>, <tt>on</tt> and <tt>yes</tt>
      are the same as boolean <tt>true</tt>, while <tt>off</tt> and <tt>no</tt> are boolean <tt>false</tt>.
    </p>
    <p>
      <tt>unless</tt> can be used as the inverse of <tt>if</tt>.
    </p>
    <p>
      As a shortcut for <tt>this.property</tt>, you can use <tt>@property</tt>.
    </p>
    <p>
      You can use <tt>in</tt> to test for array presence, and <tt>of</tt> to
      test for JavaScript object-key presence.
    </p>

    <p>
      All together now:
    </p>

    <table class="definitions">
      <tr><th>CoffeeScript</th><th>JavaScript</th></tr>
      <tr><td><tt>is</tt></td><td><tt>===</tt></td></tr>
      <tr><td><tt>isnt</tt></td><td><tt>!==</tt></td></tr>
      <tr><td><tt>not</tt></td><td><tt>!</tt></td></tr>
      <tr><td><tt>and</tt></td><td><tt>&amp;&amp;</tt></td></tr>
      <tr><td><tt>or</tt></td><td><tt>||</tt></td></tr>
      <tr><td><tt>true, yes, on</tt></td><td><tt>true</tt></td></tr>
      <tr><td><tt>false, no, off</tt></td><td><tt>false</tt></td></tr>
      <tr><td><tt>@, this</tt></td><td><tt>this</tt></td></tr>
      <tr><td><tt>of</tt></td><td><tt>in</tt></td></tr>
      <tr><td><tt>in</tt></td><td><i><small>no JS equivalent</small></i></td></tr>
    </table>

    <%= code_for('aliases') %>

    <p>
      <b class="header">The Existential Operator</b>
      It's a little difficult to check for the existence of a variable in
      JavaScript. <tt>if (variable) ...</tt> comes close, but fails for zero,
      the empty string, and false. CoffeeScript's existential operator <tt>?</tt> returns true unless
      a variable is <b>null</b> or <b>undefined</b>, which makes it analogous
      to Ruby's <tt>nil?</tt>
    </p>
    <p>
      It can also be used for safer conditional assignment than <tt>||=</tt>
      provides, for cases where you may be handling numbers or strings.
    </p>
    <%= code_for('existence', 'footprints') %>
    <p>
      The accessor variant of the existential operator <tt>?.</tt> can be used to soak
      up null references in a chain of properties. Use it instead
      of the dot accessor <tt>.</tt> in cases where the base value may be <b>null</b>
      or <b>undefined</b>. If all of the properties exist then you'll get the expected
      result, if the chain is broken, <b>undefined</b> is returned instead of
      the <b>TypeError</b> that would be raised otherwise.
    </p>
    <%= code_for('soaks') %>
    <p>
      Soaking up nulls is similar to Ruby's
      <a href="http://andand.rubyforge.org/">andand gem</a>, and to the
      <a href="http://groovy.codehaus.org/Operators#Operators-SafeNavigationOperator%28%3F.%29">safe navigation operator</a>
      in Groovy.
    </p>

    <p>
      <span id="classes" class="bookmark"></span>
      <b class="header">Classes, Inheritance, and Super</b>
      JavaScript's prototypal inheritance has always been a bit of a
      brain-bender, with a whole family tree of libraries that provide a cleaner
      syntax for classical inheritance on top of JavaScript's prototypes:
      <a href="http://code.google.com/p/base2/">Base2</a>,
      <a href="http://prototypejs.org/">Prototype.js</a>,
      <a href="http://jsclass.jcoglan.com/">JS.Class</a>, etc.
      The libraries provide syntactic sugar, but the built-in inheritance would
      be completely usable if it weren't for a couple of small exceptions:
      it's awkward to call <b>super</b> (the prototype object's
      implementation of the current function), and it's awkward to correctly
      set the prototype chain.
    </p>
    <p>
      Instead of repetitively attaching functions to a prototype, CoffeeScript
      provides a basic <tt>class</tt> structure that allows you to name your class,
      set the superclass, assign prototypal properties, and define the constructor,
      in a single assignable expression.
    </p>
    <p>
      Constructor functions are named, to better support helpful stack traces.
      In the first class in the example below, <tt>this.constructor.name is "Animal"</tt>.
    </p>
    <%= code_for('classes', true) %>
    <p>
      If structuring your prototypes classically isn't your cup of tea, CoffeeScript
      provides a couple of lower-level conveniences. The <tt>extends</tt> operator
      helps with proper prototype setup, and can be used to create an inheritance
      chain between any pair of constructor functions; <tt>::</tt> gives you
      quick access to an object's prototype; and <tt>super()</tt>
      is converted into a call against the immediate ancestor's method of the same name.
    </p>
    <%= code_for('prototypes', '"one_two".dasherize()') %>
    <p>
      Finally, class definitions are blocks of executable code, which make for interesting
      metaprogramming possibilities. Because in the context of a class definition,
      <tt>this</tt> is the class object itself (the constructor function), you
      can assign static properties by using <br /><tt>@property: value</tt>, and call
      functions defined in parent classes: <tt>@attr 'title', type: 'text'</tt>
    </p>

    <p>
      <span id="destructuring" class="bookmark"></span>
      <b class="header">Destructuring Assignment</b>
      To make extracting values from complex arrays and objects more convenient,
      CoffeeScript implements ECMAScript Harmony's proposed
      <a href="http://wiki.ecmascript.org/doku.php?id=harmony:destructuring">destructuring assignment</a>
      syntax. When you assign an array or object literal to a value, CoffeeScript
      breaks up and matches both sides against each other, assigning the values
      on the right to the variables on the left. In the simplest case, it can be
      used for parallel assignment:
    </p>
    <%= code_for('parallel_assignment', 'theBait') %>
    <p>
      But it's also helpful for dealing with functions that return multiple
      values.
    </p>
    <%= code_for('multiple_return_values', 'forecast') %>
    <p>
      Destructuring assignment can be used with any depth of array and object nesting,
      to help pull out deeply nested properties.
    </p>
    <%= code_for('object_extraction', 'name + " - " + street') %>
    <p>
      Destructuring assignment can even be combined with splats.
    </p>
    <%= code_for('patterns_and_splats', 'contents.join("")') %>

    <p>
      <span id="fat_arrow" class="bookmark"></span>
      <b class="header">Function binding</b>
      In JavaScript, the <tt>this</tt> keyword is dynamically scoped to mean the
      object that the current function is attached to. If you pass a function as
      a callback or attach it to a different object, the original value of <tt>this</tt>
      will be lost. If you're not familiar with this behavior,
      <a href="http://www.digital-web.com/articles/scope_in_javascript/">this Digital Web article</a>
      gives a good overview of the quirks.
    </p>
    <p>
      The fat arrow <tt>=&gt;</tt> can be used to both define a function, and to bind
      it to the current value of <tt>this</tt>, right on the spot. This is helpful
      when using callback-based libraries like Prototype or jQuery, for creating
      iterator functions to pass to <tt>each</tt>, or event-handler functions
      to use with <tt>bind</tt>. Functions created with the fat arrow are able to access
      properties of the <tt>this</tt> where they're defined.
    </p>
    <%= code_for('fat_arrow') %>
    <p>
      If we had used <tt>-&gt;</tt> in the callback above, <tt>@customer</tt> would
      have referred to the undefined "customer" property of the DOM element,
      and trying to call <tt>purchase()</tt> on it would have raised an exception.
    </p>
    <p>
      When used in a class definition, methods declared with the fat arrow will
      be automatically bound to each instance of the class when the instance is
      constructed.
    </p>

    <p>
      <span id="embedded" class="bookmark"></span>
      <b class="header">Embedded JavaScript</b>
      Hopefully, you'll never need to use it, but if you ever need to intersperse
      snippets of JavaScript within your CoffeeScript, you can
      use backticks to pass it straight through.
    </p>
    <%= code_for('embedded', 'hi()') %>

    <p>
      <span id="switch" class="bookmark"></span>
      <b class="header">Switch/When/Else</b>
      <b>Switch</b> statements in JavaScript are a bit awkward. You need to
      remember to <b>break</b> at the end of every <b>case</b> statement to
      avoid accidentally falling through to the default case.
      CoffeeScript prevents accidental fall-through, and can convert the <tt>switch</tt>
      into a returnable, assignable expression. The format is: <tt>switch</tt> condition,
      <tt>when</tt> clauses, <tt>else</tt> the default case.
    </p>
    <p>
      As in Ruby, <b>switch</b> statements in CoffeeScript can take multiple
      values for each <b>when</b> clause. If any of the values match, the clause
      runs.
    </p>
    <%= code_for('switch') %>

    <p>
      <span id="try" class="bookmark"></span>
      <b class="header">Try/Catch/Finally</b>
      Try/catch statements are just about the same as JavaScript (although
      they work as expressions).
    </p>
    <%= code_for('try') %>

    <p>
      <span id="comparisons" class="bookmark"></span>
      <b class="header">Chained Comparisons</b>
      CoffeeScript borrows
      <a href="http://docs.python.org/reference/expressions.html#notin">chained comparisons</a>
      from Python &mdash; making it easy to test if a value falls within a
      certain range.
    </p>
    <%= code_for('comparisons', 'healthy') %>

    <p>
      <span id="strings" class="bookmark"></span>
      <b class="header">String Interpolation, Block Strings, and Block Comments</b>
      Ruby-style string interpolation is included in CoffeeScript. Double-quoted
      strings allow for interpolated values, using <tt>#{ ... }</tt>,
      and single-quoted strings are literal.
    </p>
    <%= code_for('interpolation', 'sentence') %>
    <p>
      Multiline strings are allowed in CoffeeScript.
    </p>
    <%= code_for('strings', 'mobyDick') %>
    <p>
      Block strings can be used to hold formatted or indentation-sensitive text
      (or, if you just don't feel like escaping quotes and apostrophes). The
      indentation level that begins the block is maintained throughout, so
      you can keep it all aligned with the body of your code.
    </p>
    <%= code_for('heredocs', 'html') %>
    <p>
      Double-quoted block strings, like other double-quoted strings, allow interpolation.
    </p>
    <p>
      Sometimes you'd like to pass a block comment through to the generated
      JavaScript. For example, when you need to embed a licensing header at
      the top of a file. Block comments, which mirror the syntax for block strings,
      are preserved in the generated code.
    </p>
    <%= code_for('block_comment') %>

    <p>
      <span id="regexes" class="bookmark"></span>
      <b class="header">Block Regular Expressions</b>
      Similar to block strings and comments, CoffeeScript supports block regexes &mdash;
      extended regular expressions that ignore internal whitespace and can contain
      comments and interpolation. Modeled after Perl's <tt>/x</tt> modifier, CoffeeSctipt's
      block regexes are delimited by <tt>///</tt> and go a long way towards making complex
      regular expressions readable. To quote from the CoffeeScript source:
    </p>
    <%= code_for('heregexes') %>


    <h2>
      <span id="cake" class="bookmark"></span>
      Cake, and Cakefiles
    </h2>

    <p>
      CoffeeScript includes a (very) simple build system similar to
      <a href="http://www.gnu.org/software/make/">Make</a> and
      <a href="http://rake.rubyforge.org/">Rake</a>. Naturally,
      it's called Cake, and is used for the tasks that build and test the CoffeeScript
      language itself. Tasks are defined in a file named <tt>Cakefile</tt>, and
      can be invoked by running <tt>cake [task]</tt> from within the directory.
      To print a list of all the tasks and options, just type <tt>cake</tt>.
    </p>

    <p>
      Task definitions are written in CoffeeScript, so you can put arbitrary code
      in your Cakefile. Define a task with a name, a long description, and the
      function to invoke when the task is run. If your task takes a command-line
      option, you can define the option with short and long flags, and it will
      be made available in the <tt>options</tt> object. Here's a task that uses
      the Node.js API to rebuild CoffeeScript's parser:
    </p>
    <%= code_for('cake_tasks') %>
    <p>
      If you need to invoke one task before another &mdash; for example, running
      <tt>build</tt> before <tt>test</tt>, you can use the <tt>invoke</tt> function:
      <tt>invoke 'build'</tt>. Cake tasks are a minimal way to expose your
      CoffeeScript functions to the command line, so
      <a href="documentation/docs/cake.html">don't expect any fanciness built-in</a>.
      If you need dependencies, or async callbacks, it's best to put them in your
      code itself &mdash; not the cake task.
    </p>

    <h2>
      <span id="scripts" class="bookmark"></span>
      "text/coffeescript" Script Tags
    </h2>

    <p>
      While it's not recommended for serious use, CoffeeScripts may be included
      directly within the browser using <tt>&lt;script type="text/coffeescript"&gt;</tt>
      tags. The source includes a compressed and minified version of the compiler
      (<a href="extras/coffee-script.js">Download current version here, 39k when gzipped</a>)
      as <tt>extras/coffee-script.js</tt>. Include this file on a page with
      inline CoffeeScript tags, and it will compile and evaluate them in order.
    </p>

    <p>
      In fact, the little bit of glue script that runs "Try CoffeeScript" above,
      as well as the jQuery for the menu, is implemented in just this way.
      View source and look at the bottom of the page to see the example.
      Including the script also gives you access to <tt>CoffeeScript.compile()</tt>
      so you can pop open Firebug and try compiling some strings.
    </p>

    <p>
      The usual caveats about CoffeeScript apply &mdash; your inline scripts will
      run within a closure wrapper, so if you want to expose global variables or
      functions, attach them to the <tt>window</tt> object.
    </p>

    <h2>
      <span id="resources" class="bookmark"></span>
      Books
    </h2>

    <p>
      There are a number of excellent resources to help you get
      started with CoffeeScript, some of which are freely available online.
    </p>

    <ul>
      <li>
        <a href="http://arcturo.github.com/library/coffeescript/">The Little Book on CoffeeScript</a>
        is a brief 5-chapter introduction to CoffeeScript, written with great
        clarity and precision by
        <a href="http://alexmaccaw.co.uk/">Alex MacCaw</a>.
      </li>
      <li>
        <a href="http://autotelicum.github.com/Smooth-CoffeeScript/">Smooth CoffeeScript</a>
        is a reimagination of the excellent book
        <a href="http://eloquentjavascript.net/">Eloquent JavaScript</a>, as if
        it had been written in CoffeeScript instead. Covers language features
        as well a the functional and object oriented programming styles. By
        <a href="https://github.com/autotelicum">E. Hoigaard</a>.
      </li>
      <li>
        <a href="http://pragprog.com/book/tbcoffee/coffeescript">CoffeeScript: Accelerated JavaScript Development</a>
        is <a href="http://trevorburnham.com/">Trevor Burnham</a>'s thorough
        introduction to the language. By the end of the book, you'll have built
        a fast-paced multiplayer word game, writing both the client-side and Node.js
        portions in CoffeeScript.
      </li>
    </ul>

    <h2>
      Screencasts
    </h2>

    <ul>
      <li>
        <a href="http://coffeescript.codeschool.com">A Sip of CoffeeScript</a> is a <a href="http://www.codeschool.com">Code School Course</a>
        which combines 6 screencasts with in-browser coding to make learning fun.  The first level is free to try out.
      </li>
      <li>
        <a href="http://peepcode.com/products/coffeescript">Meet CoffeeScript</a>
        is a 75-minute long screencast by <a href="http://peepcode.com/">PeepCode</a>.
        Highly memorable for its animations which demonstrate transforming CoffeeScript
        into the equivalent JS.
      </li>
      <li>
        If you're looking for less of a time commitment, RailsCasts'
        <a href="http://railscasts.com/episodes/267-coffeescript-basics">CoffeeScript Basics</a>
        should have you covered, hitting all of the important notes about CoffeeScript
        in 11 minutes.
      </li>
    </ul>

    <h2>
      Examples
    </h2>

    <p>
      The <a href="https://github.com/languages/coffeescript">best list of
      open-source CoffeeScript examples</a> can be found on GitHub. But just
      to throw out few more:
    </p>

    <ul>
      <li>
        <b>github</b>'s <a href="http://hubot.github.com/">Hubot</a>,
        a friendly IRC robot that can perform any number of useful and useless tasks.
      </li>
      <li>
        <b>sstephenson</b>'s <a href="http://pow.cx/">Pow</a>,
        a zero-configuration Rack server, with comprehensive annotated source.
      </li>
      <li>
        <b>frank06</b>'s <a href="http://riakjs.org/">riak-js</a>, a Node.js client for
        <a href="http://www.basho.com/Riak.html">Riak</a>, with support for HTTP
        and Protocol Buffers.
      </li>
      <li>
        <b>technoweenie</b>'s <a href="https://github.com/technoweenie/coffee-resque">Coffee-Resque</a>,
        a port of <a href="https://github.com/defunkt/resque">Resque</a> for Node.js.
      </li>
      <li>
        <b>assaf</b>'s <a href="http://zombie.labnotes.org/">Zombie.js</a>,
        a headless, full-stack, faux-browser testing library for Node.js.
      </li>
      <li>
        <b>jashkenas</b>' <a href="documentation/docs/underscore.html">Underscore.coffee</a>, a port
        of the <a href="http://documentcloud.github.com/underscore/">Underscore.js</a>
        library of helper functions.
      </li>
      <li>
        <b>stephank</b>'s <a href="https://github.com/stephank/orona">Orona</a>, a remake of
        the Bolo tank game for modern browsers.
      </li>
      <li>
        <b>josh</b>'s <a href="http://josh.github.com/nack/">nack</a>, a Node.js-powered
        <a href="http://rack.rubyforge.org/">Rack</a> server.
      </li>
    </ul>

    <h2>
      Resources
    </h2>

    <ul>
      <li>
        <a href="http://github.com/jashkenas/coffee-script/">Source Code</a><br />
        Use <tt>bin/coffee</tt> to test your changes,<br />
        <tt>bin/cake test</tt> to run the test suite,<br />
        <tt>bin/cake build</tt> to rebuild the CoffeeScript compiler, and <br />
        <tt>bin/cake build:parser</tt> to regenerate the Jison parser if you're
        working on the grammar. <br /><br />
        <tt>git checkout lib &amp;&amp; bin/cake build:full</tt> is a good command to run when you're working
        on the core language. It'll refresh the lib directory
        (in case you broke something), build your altered compiler, use that to
        rebuild itself (a good sanity test) and then run all of the tests. If
        they pass, there's a good chance you've made a successful change.
      </li>
      <li>
        <a href="http://github.com/jashkenas/coffee-script/issues">CoffeeScript Issues</a><br />
        Bug reports, feature proposals, and ideas for changes to the language belong here.
      </li>
      <li>
        <a href="https://groups.google.com/forum/#!forum/coffeescript">CoffeeScript Google Group</a><br />
        If you'd like to ask a question, the mailing list is a good place to get help.
      </li>
      <li>
        <a href="http://github.com/jashkenas/coffee-script/wiki">The CoffeeScript Wiki</a><br />
        If you've ever learned a neat CoffeeScript tip or trick, or ran into a gotcha &mdash; share it on the wiki.
        The wiki also serves as a directory of handy
        <a href="http://github.com/jashkenas/coffee-script/wiki/Text-editor-plugins">text editor extensions</a>,
        <a href="http://github.com/jashkenas/coffee-script/wiki/Web-framework-plugins">web framework plugins</a>,
        and general <a href="http://github.com/jashkenas/coffee-script/wiki/Build-tools">CoffeeScript build tools</a>.
      </li>
      <li>
        <a href="http://github.com/jashkenas/coffee-script/wiki/FAQ">The FAQ</a><br />
        Perhaps your CoffeeScript-related question has been asked before. Check the FAQ first.
      </li>
      <li>
        <a href="https://github.com/jashkenas/coffee-script/downloads">High-Rez Logo</a><br />
        The CoffeeScript logo is available in Illustrator, EPS and PSD formats, for use
        in presentations.
      </li>
    </ul>

    <h2>
      <span id="webchat" class="bookmark"></span>
      Web Chat (IRC)
    </h2>

    <p>
      Quick help and advice can usually be found in the CoffeeScript IRC room.
      Join <tt>#coffeescript</tt> on <tt>irc.freenode.net</tt>, or click the
      button below to open a webchat session on this page.
    </p>

    <p>
      <button id="open_webchat">click to open #coffeescript</button>
    </p>

    <h2>
      <span id="changelog" class="bookmark"></span>
      Change Log
    </h2>

    <p>
      <b class="header" style="margin-top: 20px;">
        <a href="https://github.com/jashkenas/coffee-script/compare/1.3.1...1.3.3">1.3.3</a>
        <span class="timestamp"> &ndash; <small>May 15, 2012</small></span>
      </b>
      <ul>
        <li>
          Due to the new semantics of JavaScript's strict mode, CoffeeScript no
          longer guarantees that constructor functions have names in all runtimes.
          See <a href="https://github.com/jashkenas/coffee-script/issues/2052">#2052</a>
          for discussion.
        </li>
        <li>
          Inside of a nested function inside of an instance method, it's now possible
          to call <tt>super</tt> more reliably (walks recursively up).
        </li>
        <li>
          Named loop variables no longer have different scoping heuristics than
          other local variables. (Reverts #643)
        </li>
        <li>
          Fix for splats nested within the LHS of destructuring assignment.
        </li>
        <li>
          Corrections to our compile time strict mode forbidding of octal literals.
        </li>
      </ul>
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">
        <a href="https://github.com/jashkenas/coffee-script/compare/1.2.0...1.3.1">1.3.1</a>
        <span class="timestamp"> &ndash; <small>April 10, 2012</small></span>
      </b>
      <ul>
        <li>
          CoffeeScript now enforces all of JavaScript's <b>Strict Mode</b> early syntax
          errors at compile time. This includes old-style octal literals,
          duplicate property names in object literals, duplicate parameters in
          a function definition, deleting naked variables, setting the value of
          <tt>eval</tt> or <tt>arguments</tt>, and more.
          See a full discussion at
          <a href="https://github.com/jashkenas/coffee-script/issues/1547">#1547</a>.
        </li>
        <li>
          The REPL now has a handy new multi-line mode for entering large
          blocks of code. It's useful when copy-and-pasting examples into the
          REPL. Enter multi-line mode with <tt>Ctrl-V</tt>. You may also now
          pipe input directly into the REPL.
        </li>
        <li>
          CoffeeScript now prints a <tt>Generated by CoffeeScript VERSION</tt>
          header at the top of each compiled file.
        </li>
        <li>
          Conditional assignment of previously undefined variables
          <tt>a or= b</tt> is now considered a syntax error.
        </li>
        <li>
          A tweak to the semantics of <tt>do</tt>, which can now be used to
          more easily simulate a namespace: <tt>do (x = 1, y = 2) -> ...</tt>
        </li>
        <li>
          Loop indices are now mutable within a loop iteration, and immutable
          between them.
        </li>
        <li>
          Both endpoints of a slice are now allowed to be omitted for consistency,
          effectively creating a shallow copy of the list.
        </li>
        <li>
          Additional tweaks and improvments to <tt>coffee --watch</tt> under
          Node's "new" file watching API. Watch will now beep by default
          if you introduce a syntax error into a watched script. We also now
          ignore hidden directories by default when watching recursively.
        </li>
      </ul>
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">
        <a href="https://github.com/jashkenas/coffee-script/compare/1.1.3...1.2.0">1.2.0</a>
        <span class="timestamp"> &ndash; <small>Dec. 18, 2011</small></span>
      </b>
      <ul>
        <li>
          Multiple improvements to <tt>coffee --watch</tt> and <tt>--join</tt>.
          You may now use both together, as well as add and remove
          files and directories within a <tt>--watch</tt>'d folder.
        </li>
        <li>
          The <tt>throw</tt> statement can now be used as part of an expression.
        </li>
        <li>
          Block comments at the top of the file will now appear outside of the
          safety closure wrapper.
        </li>
        <li>
          Fixed a number of minor 1.1.3 regressions having to do with trailing
          operators and unfinished lines, and a more major 1.1.3 regression that
          caused bound functions <i>within</i> bound class functions to have the incorrect
          <tt>this</tt>.
        </li>
      </ul>
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">
        <a href="https://github.com/jashkenas/coffee-script/compare/1.1.2...1.1.3">1.1.3</a>
        <span class="timestamp"> &ndash; <small>Nov. 8, 2011</small></span>
      </b>
      <ul>
        <li>
          Ahh, whitespace. CoffeeScript's compiled JS now tries to space things
          out and keep it readable, as you can see in the examples on this page.
        </li>
        <li>
          You can now call <tt>super</tt> in class level methods in class bodies,
          and bound class methods now preserve their correct context.
        </li>
        <li>
          JavaScript has always supported octal numbers <tt>010 is 8</tt>,
          and hexadecimal numbers <tt>0xf is 15</tt>, but CoffeeScript now
          also supports binary numbers: <tt>0b10 is 2</tt>.
        </li>
        <li>
          The CoffeeScript module has been nested under a subdirectory to make
          it easier to <tt>require</tt> individual components separately, without
          having to use <b>npm</b>. For example, after adding the CoffeeScript
          folder to your path: <tt>require('coffee-script/lexer')</tt>
        </li>
        <li>
          There's a new "link" feature in Try CoffeeScript on this webpage. Use
          it to get a shareable permalink for your example script.
        </li>
        <li>
          The <tt>coffee --watch</tt> feature now only works on Node.js 0.6.0
          and higher, but now also works properly on Windows.
        </li>
        <li>
          Lots of small bug fixes from
          <b><a href="https://github.com/michaelficarra">@michaelficarra</a></b>,
          <b><a href="https://github.com/geraldalewis">@geraldalewis</a></b>,
          <b><a href="https://github.com/satyr">@satyr</a></b>, and
          <b><a href="https://github.com/trevorburnham">@trevorburnham</a></b>.
        </li>
      </ul>
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">
        <a href="https://github.com/jashkenas/coffee-script/compare/1.1.1...1.1.2">1.1.2</a>
        <span class="timestamp"> &ndash; <small>August 4, 2011</small></span>
      </b>
      Fixes for block comment formatting, <tt>?=</tt> compilation, implicit calls
      against control structures, implicit invocation of a try/catch block,
      variadic arguments leaking from local scope, line numbers in syntax errors
      following heregexes, property access on parenthesized number literals,
      bound class methods and super with reserved names, a REPL overhaul,
      consecutive compiled semicolons, block comments in implicitly called objects,
      and a Chrome bug.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">1.1.1
        <span class="timestamp"> &ndash; <small>May 10, 2011</small></span>
      </b>
      Bugfix release for classes with external constructor functions, see
      issue #1182.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">1.1.0
        <span class="timestamp"> &ndash; <small>May 1, 2011</small></span>
      </b>
      When running via the <tt>coffee</tt> executable, <tt>process.argv</tt> and
      friends now report <tt>coffee</tt> instead of <tt>node</tt>.
      Better compatibility with <b>Node.js 0.4.x</b> module lookup changes.
      The output in the REPL is now colorized, like Node's is.
      Giving your concatenated CoffeeScripts a name when using <tt>--join</tt> is now mandatory.
      Fix for lexing compound division <tt>/=</tt> as a regex accidentally.
      All <tt>text/coffeescript</tt> tags should now execute in the order they're included.
      Fixed an issue with extended subclasses using external constructor functions.
      Fixed an edge-case infinite loop in <tt>addImplicitParentheses</tt>.
      Fixed exponential slowdown with long chains of function calls.
      Globals no longer leak into the CoffeeScript REPL.
      Splatted parameters are declared local to the function.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">1.0.1
        <span class="timestamp"> &ndash; <small>Jan 31, 2011</small></span>
      </b>
      Fixed a lexer bug with Unicode identifiers. Updated REPL for compatibility
      with Node.js 0.3.7. Fixed requiring relative paths in the REPL. Trailing
      <tt>return</tt> and <tt>return undefined</tt> are now optimized away.
      Stopped requiring the core Node.js <tt>"util"</tt> module for
      back-compatibility with Node.js 0.2.5. Fixed a case where a
      conditional <tt>return</tt> would cause fallthrough in a <tt>switch</tt>
      statement. Optimized empty objects in destructuring assignment.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">1.0.0
        <span class="timestamp"> &ndash; <small>Dec 24, 2010</small></span>
      </b>
      CoffeeScript loops no longer try to preserve block scope when functions
      are being generated within the loop body. Instead, you can use the
      <tt>do</tt> keyword to create a convenient closure wrapper.
      Added a <tt>--nodejs</tt> flag for passing through options directly
      to the <tt>node</tt> executable.
      Better behavior around the use of pure statements within expressions.
      Fixed inclusive slicing through <tt>-1</tt>, for all browsers, and splicing
      with arbitrary expressions as endpoints.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.6
        <span class="timestamp"> &ndash; <small>Dec 6, 2010</small></span>
      </b>
      The REPL now properly formats stacktraces, and stays alive through
      asynchronous exceptions. Using <tt>--watch</tt> now prints timestamps as
      files are compiled. Fixed some accidentally-leaking variables within
      plucked closure-loops. Constructors now maintain their declaration
      location within a class body. Dynamic object keys were removed.
      Nested classes are now supported. Fixes execution context for naked
      splatted functions. Bugfix for inversion of chained comparisons.
      Chained class instantiation now works properly with splats.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.5
        <span class="timestamp"> &ndash; <small>Nov 21, 2010</small></span>
      </b>
      0.9.5 should be considered the first release candidate for CoffeeScript 1.0.
      There have been a large number of internal changes since the previous release,
      many contributed from <b>satyr</b>'s <a href="http://github.com/satyr/coco">Coco</a>
      dialect of CoffeeScript. Heregexes (extended regexes) were added. Functions
      can now have default arguments. Class bodies are now executable code.
      Improved syntax errors for invalid CoffeeScript. <tt>undefined</tt> now
      works like <tt>null</tt>, and cannot be assigned a new value.
      There was a precedence change with respect to single-line comprehensions:
      <tt>result = i for i in list</tt><br /> used to parse as <tt>result = (i for i in list)</tt>
      by default ... it now parses as <br /><tt>(result = i) for i in list</tt>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.4
        <span class="timestamp"> &ndash; <small>Sep 21, 2010</small></span>
      </b>
      CoffeeScript now uses appropriately-named temporary variables, and recycles
      their references after use. Added <tt>require.extensions</tt> support for
      <b>Node.js 0.3</b>. Loading CoffeeScript in the browser now adds just a
      single <tt>CoffeeScript</tt> object to global scope.
      Fixes for implicit object and block comment edge cases.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.3
        <span class="timestamp"> &ndash; <small>Sep 16, 2010</small></span>
      </b>
      CoffeeScript <tt>switch</tt> statements now compile into JS <tt>switch</tt>
      statements &mdash; they previously compiled into <tt>if/else</tt> chains
      for JavaScript 1.3 compatibility.
      Soaking a function invocation is now supported. Users of the RubyMine
      editor should now be able to use <tt>--watch</tt> mode.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.2
        <span class="timestamp"> &ndash; <small>Aug 23, 2010</small></span>
      </b>
      Specifying the start and end of a range literal is now optional, eg. <tt>array[3..]</tt>.
      You can now say <tt>a not instanceof b</tt>.
      Fixed important bugs with nested significant and non-significant indentation (Issue #637).
      Added a <tt>--require</tt> flag that allows you to hook into the <tt>coffee</tt> command.
      Added a custom <tt>jsl.conf</tt> file for our preferred JavaScriptLint setup.
      Sped up Jison grammar compilation time by flattening rules for operations.
      Block comments can now be used with JavaScript-minifier-friendly syntax.
      Added JavaScript's compound assignment bitwise operators. Bugfixes to
      implicit object literals with leading number and string keys, as the subject
      of implicit calls, and as part of compound assignment.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.1
        <span class="timestamp"> &ndash; <small>Aug 11, 2010</small></span>
      </b>
      Bugfix release for <b>0.9.1</b>. Greatly improves the handling of mixed
      implicit objects, implicit function calls, and implicit indentation.
      String and regex interpolation is now strictly <tt>#{ ... }</tt> (Ruby style).
      The compiler now takes a <tt>--require</tt> flag, which specifies scripts
      to run before compilation.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.0
        <span class="timestamp"> &ndash; <small>Aug 4, 2010</small></span>
      </b>
      The CoffeeScript <b>0.9</b> series is considered to be a release candidate
      for <b>1.0</b>; let's give her a shakedown cruise. <b>0.9.0</b> introduces a massive
      backwards-incompatible change: Assignment now uses <tt>=</tt>, and object
      literals use <tt>:</tt>, as in JavaScript. This allows us to have implicit
      object literals, and YAML-style object definitions. Half assignments are
      removed, in favor of <tt>+=</tt>, <tt>or=</tt>, and friends.
      Interpolation now uses a hash mark <tt>#</tt> instead of the dollar sign
      <tt>$</tt> &mdash; because dollar signs may be part of a valid JS identifier.
      Downwards range comprehensions are now safe again, and are optimized to
      straight for loops when created with integer endpoints.
      A fast, unguarded form of object comprehension was added:
      <tt>for all key, value of object</tt>. Mentioning the <tt>super</tt> keyword
      with no arguments now forwards all arguments passed to the function,
      as in Ruby. If you extend class <tt>B</tt> from parent class <tt>A</tt>, if
      <tt>A</tt> has an <tt>extended</tt> method defined, it will be called, passing in <tt>B</tt> &mdash;
      this enables static inheritance, among other things. Cleaner output for
      functions bound with the fat arrow. <tt>@variables</tt> can now be used
      in parameter lists, with the parameter being automatically set as a property
      on the object &mdash; useful in constructors and setter functions.
      Constructor functions can now take splats.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.7.2
        <span class="timestamp"> &ndash; <small>Jul 12, 2010</small></span>
      </b>
      Quick bugfix (right after 0.7.1) for a problem that prevented <tt>coffee</tt>
      command-line options from being parsed in some circumstances.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.7.1
        <span class="timestamp"> &ndash; <small>Jul 11, 2010</small></span>
      </b>
      Block-style comments are now passed through and printed as JavaScript block
      comments -- making them useful for licenses and copyright headers. Better
      support for running coffee scripts standalone via hashbangs.
      Improved syntax errors for tokens that are not in the grammar.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.7.0
        <span class="timestamp"> &ndash; <small>Jun 28, 2010</small></span>
      </b>
      Official CoffeeScript variable style is now camelCase, as in JavaScript.
      Reserved words are now allowed as object keys, and will be quoted for you.
      Range comprehensions now generate cleaner code, but you have to specify <tt>by -1</tt>
      if you'd like to iterate downward. Reporting of syntax errors is greatly
      improved from the previous release. Running <tt>coffee</tt> with no arguments
      now launches the REPL, with Readline support. The <tt>&lt;-</tt> bind operator
      has been removed from CoffeeScript. The <tt>loop</tt> keyword was added,
      which is equivalent to a <tt>while true</tt> loop. Comprehensions that contain
      closures will now close over their variables, like the semantics of a <tt>forEach</tt>.
      You can now use bound function in class definitions (bound to the instance).
      For consistency, <tt>a in b</tt> is now an array presence check, and <tt>a of b</tt>
      is an object-key check. Comments are no longer passed through to the generated
      JavaScript.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.6.2
        <span class="timestamp"> &ndash; <small>May 15, 2010</small></span>
      </b>
      The <tt>coffee</tt> command will now preserve directory structure when
      compiling a directory full of scripts. Fixed two omissions that were preventing
      the CoffeeScript compiler from running live within Internet Explorer.
      There's now a syntax for block comments, similar in spirit to CoffeeScript's heredocs.
      ECMA Harmony DRY-style pattern matching is now supported, where the name
      of the property is the same as the name of the value: <tt>{name, length}: func</tt>.
      Pattern matching is now allowed within comprehension variables. <tt>unless</tt>
      is now allowed in block form. <tt>until</tt> loops were added, as the inverse
      of <tt>while</tt> loops. <tt>switch</tt> statements are now allowed without
      switch object clauses. Compatible
      with Node.js <b>v0.1.95</b>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.6.1
        <span class="timestamp"> &ndash; <small>Apr 12, 2010</small></span>
      </b>
      Upgraded CoffeeScript for compatibility with the new Node.js <b>v0.1.90</b>
      series.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.6.0
        <span class="timestamp"> &ndash; <small>Apr 3, 2010</small></span>
      </b>
      Trailing commas are now allowed, a-la Python. Static
      properties may be assigned directly within class definitions,
      using <tt>@property</tt> notation.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.6
        <span class="timestamp"> &ndash; <small>Mar 23, 2010</small></span>
      </b>
      Interpolation can now be used within regular expressions and heredocs, as well as
      strings. Added the <tt>&lt;-</tt> bind operator.
      Allowing assignment to half-expressions instead of special <tt>||=</tt>-style
      operators. The arguments object is no longer automatically converted into
      an array. After requiring <tt>coffee-script</tt>, Node.js can now directly
      load <tt>.coffee</tt> files, thanks to <b>registerExtension</b>. Multiple
      splats can now be used in function calls, arrays, and pattern matching.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.5
        <span class="timestamp"> &ndash; <small>Mar 8, 2010</small></span>
      </b>
      String interpolation, contributed by
      <a href="http://github.com/StanAngeloff">Stan Angeloff</a>.
      Since <tt>--run</tt> has been the default since <b>0.5.3</b>, updating
      <tt>--stdio</tt> and <tt>--eval</tt> to run by default, pass <tt>--compile</tt>
      as well if you'd like to print the result.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.4
        <span class="timestamp"> &ndash; <small>Mar 3, 2010</small></span>
      </b>
      Bugfix that corrects the Node.js global constants <tt>__filename</tt> and
      <tt>__dirname</tt>. Tweaks for more flexible parsing of nested function
      literals and improperly-indented comments. Updates for the latest Node.js API.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.3
        <span class="timestamp"> &ndash; <small>Feb 27, 2010</small></span>
      </b>
      CoffeeScript now has a syntax for defining classes. Many of the core
      components (Nodes, Lexer, Rewriter, Scope, Optparse) are using them.
      Cakefiles can use <tt>optparse.coffee</tt> to define options for tasks.
      <tt>--run</tt> is now the default flag for the <tt>coffee</tt> command,
      use <tt>--compile</tt> to save JavaScripts. Bugfix for an ambiguity between
      RegExp literals and chained divisions.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.2
        <span class="timestamp"> &ndash; <small>Feb 25, 2010</small></span>
      </b>
      Added a compressed version of the compiler for inclusion in web pages as
      <br  /><tt>extras/coffee-script.js</tt>. It'll automatically run any script tags
      with type <tt>text/coffeescript</tt> for you. Added a <tt>--stdio</tt> option
      to the <tt>coffee</tt> command, for piped-in compiles.
    </p>


    <p>
      <b class="header" style="margin-top: 20px;">0.5.1
        <span class="timestamp"> &ndash; <small>Feb 24, 2010</small></span>
      </b>
      Improvements to null soaking with the existential operator, including
      soaks on indexed properties. Added conditions to <tt>while</tt> loops,
      so you can use them as filters with <tt>when</tt>, in the same manner as
      comprehensions.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.0
        <span class="timestamp"> &ndash; <small>Feb 21, 2010</small></span>
      </b>
      CoffeeScript 0.5.0 is a major release, While there are no language changes,
      the Ruby compiler has been removed in favor of a self-hosting
      compiler written in pure CoffeeScript.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.3.2
        <span class="timestamp"> &ndash; <small>Feb 8, 2010</small></span>
      </b>
      <tt>@property</tt> is now a shorthand for <tt>this.property</tt>.<br />
      Switched the default JavaScript engine from Narwhal to Node.js. Pass
      the <tt>--narwhal</tt> flag if you'd like to continue using it.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.3.0
        <span class="timestamp"> &ndash; <small>Jan 26, 2010</small></span>
      </b>
      CoffeeScript 0.3 includes major syntax changes:
      <br />
      The function symbol was changed to
      <tt>-></tt>, and the bound function symbol is now <tt>=></tt>.
      <br />
      Parameter lists in function definitions must now be wrapped in parentheses.
      <br />
      Added property soaking, with the <tt>?.</tt> operator.
      <br />
      Made parentheses optional, when invoking functions with arguments.
      <br />
      Removed the obsolete block literal syntax.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.6
        <span class="timestamp"> &ndash; <small>Jan 17, 2010</small></span>
      </b>
      Added Python-style chained comparisons, the conditional existence
      operator <tt>?=</tt>, and some examples from <i>Beautiful Code</i>.
      Bugfixes relating to statement-to-expression conversion, arguments-to-array
      conversion, and the TextMate syntax highlighter.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.5
        <span class="timestamp"> &ndash; <small>Jan 13, 2010</small></span>
      </b>
      The conditions in switch statements can now take multiple values at once &mdash;
      If any of them are true, the case will run. Added the long arrow <tt>==></tt>,
      which defines and immediately binds a function to <tt>this</tt>. While loops can
      now be used as expressions, in the same way that comprehensions can. Splats
      can be used within pattern matches to soak up the rest of an array.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.4
        <span class="timestamp"> &ndash; <small>Jan 12, 2010</small></span>
      </b>
      Added ECMAScript Harmony style destructuring assignment, for dealing with
      extracting values from nested arrays and objects. Added indentation-sensitive
      heredocs for nicely formatted strings or chunks of code.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.3
        <span class="timestamp"> &ndash; <small>Jan 11, 2010</small></span>
      </b>
      Axed the unsatisfactory <tt>ino</tt> keyword, replacing it with <tt>of</tt> for
      object comprehensions. They now look like: <tt>for prop, value of object</tt>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.2
        <span class="timestamp"> &ndash; <small>Jan 10, 2010</small></span>
      </b>
      When performing a comprehension over an object, use <tt>ino</tt>, instead
      of <tt>in</tt>, which helps us generate smaller, more efficient code at
      compile time.
      <br />
      Added <tt>::</tt> as a shorthand for saying <tt>.prototype.</tt>
      <br />
      The "splat" symbol has been changed from a prefix asterisk <tt>*</tt>, to
      a postfix ellipsis <tt>...</tt>
      <br />
      Added JavaScript's <tt>in</tt> operator,
      empty <tt>return</tt> statements, and empty <tt>while</tt> loops.
      <br />
      Constructor functions that start with capital letters now include a
      safety check to make sure that the new instance of the object is returned.
      <br />
      The <tt>extends</tt> keyword now functions identically to <tt>goog.inherits</tt>
      in Google's Closure Library.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.1
        <span class="timestamp"> &ndash; <small>Jan 5, 2010</small></span>
      </b>
      Arguments objects are now converted into real arrays when referenced.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.0
        <span class="timestamp"> &ndash; <small>Jan 5, 2010</small></span>
      </b>
      Major release. Significant whitespace. Better statement-to-expression
      conversion. Splats. Splice literals. Object comprehensions. Blocks.
      The existential operator. Many thanks to all the folks who posted issues,
      with special thanks to
      <a href="http://github.com/liamoc">Liam O'Connor-Davis</a> for whitespace
      and expression help.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.6
        <span class="timestamp"> &ndash; <small>Dec 27, 2009</small></span>
      </b>
      Bugfix for running <tt>coffee --interactive</tt> and <tt>--run</tt>
      from outside of the CoffeeScript directory. Bugfix for nested
      function/if-statements.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.5
        <span class="timestamp"> &ndash; <small>Dec 26, 2009</small></span>
      </b>
      Array slice literals and array comprehensions can now both take Ruby-style
      ranges to specify the start and end. JavaScript variable declaration is
      now pushed up to the top of the scope, making all assignment statements into
      expressions. You can use <tt>\</tt> to escape newlines.
      The <tt>coffee-script</tt> command is now called <tt>coffee</tt>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.4
        <span class="timestamp"> &ndash; <small>Dec 25, 2009</small></span>
      </b>
      The official CoffeeScript extension is now <tt>.coffee</tt> instead of
      <tt>.cs</tt>, which properly belongs to
      <a href="http://en.wikipedia.org/wiki/C_Sharp_(programming_language)">C#</a>.
      Due to popular demand, you can now also use <tt>=</tt> to assign. Unlike
      JavaScript, <tt>=</tt> can also be used within object literals, interchangeably
      with <tt>:</tt>. Made a grammatical fix for chained function calls
      like <tt>func(1)(2)(3)(4)</tt>. Inheritance and super no longer use
      <tt>__proto__</tt>, so they should be IE-compatible now.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.3
        <span class="timestamp"> &ndash; <small>Dec 25, 2009</small></span>
      </b>
      The <tt>coffee</tt> command now includes <tt>--interactive</tt>,
      which launches an interactive CoffeeScript session, and <tt>--run</tt>,
      which directly compiles and executes a script. Both options depend on a
      working installation of Narwhal.
      The <tt>aint</tt> keyword has been replaced by <tt>isnt</tt>, which goes
      together a little smoother with <tt>is</tt>.
      Quoted strings are now allowed as identifiers within object literals: eg.
      <tt>{"5+5": 10}</tt>.
      All assignment operators now use a colon: <tt>+:</tt>, <tt>-:</tt>,
      <tt>*:</tt>, etc.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.2
        <span class="timestamp"> &ndash; <small>Dec 24, 2009</small></span>
      </b>
      Fixed a bug with calling <tt>super()</tt> through more than one level of
      inheritance, with the re-addition of the <tt>extends</tt> keyword.
      Added experimental <a href="http://narwhaljs.org/">Narwhal</a>
      support (as a Tusk package), contributed by
      <a href="http://tlrobinson.net/">Tom Robinson</a>, including
      <b>bin/cs</b> as a CoffeeScript REPL and interpreter.
      New <tt>--no-wrap</tt> option to suppress the safety function
      wrapper.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.1
        <span class="timestamp"> &ndash; <small>Dec 24, 2009</small></span>
      </b>
      Added <tt>instanceof</tt> and <tt>typeof</tt> as operators.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.0
        <span class="timestamp"> &ndash; <small>Dec 24, 2009</small></span>
      </b>
      Initial CoffeeScript release.
    </p>

  </div>

  <script type="text/coffeescript">
    sourceFragment = "try:"

    # Set up the compilation function, to run when you stop typing.
    compileSource = ->
      source = $('#repl_source').val()
      window.compiledJS = ''
      try
        window.compiledJS = CoffeeScript.compile source, bare: on
        el = $('#repl_results')[0]
        if el.innerText
          el.innerText = window.compiledJS
        else
          $(el).text window.compiledJS
        $('#error').hide()
      catch error
        $('#error').text(error.message).show()

      # Update permalink
      $('#repl_permalink').attr 'href', "##{sourceFragment}#{encodeURIComponent source}"

    # Listen for keypresses and recompile.
    $('#repl_source').keyup -> compileSource()

    # Eval the compiled js.
    evalJS = ->
      try
        eval window.compiledJS
      catch error then alert error

    # Load the console with a string of CoffeeScript.
    window.loadConsole = (coffee) ->
      $('#repl_source').val coffee
      compileSource()
      $('.navigation.try').addClass('active')
      false

    # Helper to hide the menus.
    closeMenus = ->
      $('.navigation.active').removeClass 'active'

    $('.minibutton.run').click -> evalJS()

    # Bind navigation buttons to open the menus.
    $('.navigation').click (e) ->
      return if e.target.tagName.toLowerCase() is 'a'
      return false if $(e.target).closest('.repl_wrapper').length
      if $(this).hasClass('active')
        closeMenus()
      else
        closeMenus()
        $(this).addClass 'active'
      false

    # Dismiss console if Escape pressed or click falls outside console
    # Trigger Run button on Ctrl-Enter
    $(document.body)
      .keydown (e) ->
        closeMenus() if e.which == 27
        evalJS() if e.which == 13 and (e.metaKey or e.ctrlKey) and $('.minibutton.run:visible').length
      .click (e) ->
        return false if $(e.target).hasClass('minibutton')
        closeMenus()

    $('#open_webchat').click ->
      $(this).replaceWith $('<iframe src="http://webchat.freenode.net/?channels=coffeescript" width="625" height="400"></iframe>')

    $("#repl_permalink").click (e) ->
        window.location = $(this).attr("href")
        false

    # If source code is included in location.hash, display it.
    hash = decodeURIComponent location.hash.replace(/^#/, '')
    if hash.indexOf(sourceFragment) == 0
        src = hash.substr sourceFragment.length
        loadConsole src

    compileSource()

  </script>

  <script src="documentation/vendor/jquery-1.6.4.js"></script>
  <script src="extras/coffee-script.js"></script>

</body>
</html>
